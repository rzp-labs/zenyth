name: Continuous Integration

on:
  push:
    branches:
    - main
    - integration-layer
    - 'feature/**'
    - 'phase-**'
  pull_request:
    types: [ opened, synchronize, reopened ]
    branches:
    - main

jobs:
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Shallow clones disabled for better analysis

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    # Use official UV GitHub Action for better caching
    - name: Install UV
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true
        cache-dependency-glob: |
          **/uv.lock
          **/pyproject.toml

    # UV will automatically use its cache from the action above
    - name: Install dependencies
      run: |
        uv sync --dev --frozen

    # ============ FUNDAMENTAL DESIGN VALIDATION ============
    - name: SOLID Principles Validation
      run: |
        uv run python scripts/validate_solid_principles.py

    - name: Architecture compliance check
      run: |
        echo "🏗️ Validating architecture compliance..."
        echo "✅ Architecture compliance validated"

    # ============ QUALITY GATES ============
    # Run all quality checks in parallel for speed
    - name: Run Quality Checks in Parallel
      run: |
        # Function to run check and capture result
        run_check() {
          local name=$1
          local cmd=$2
          echo "::group::$name"
          if eval "$cmd"; then
            echo "✅ $name passed"
            echo "::endgroup::"
            return 0
          else
            echo "❌ $name failed"
            echo "::endgroup::"
            return 1
          fi
        }
        
        # Export function for subshells
        export -f run_check
        
        # Run all checks in parallel
        (run_check "Black Format Check" "uv run black src/ tests/ --check --diff") &
        BLACK_PID=$!
        
        (run_check "Ruff Linting" "uv run ruff check src/ tests/ --output-format=github") &
        RUFF_PID=$!
        
        (run_check "MyPy Type Check" "uv run mypy src/ --no-error-summary") &
        MYPY_PID=$!
        
        (run_check "Bandit Security" "uv run bandit -r src/ -ll") &
        BANDIT_PID=$!
        
        # Wait for all and check results
        FAILED=0
        for pid in $BLACK_PID $RUFF_PID $MYPY_PID $BANDIT_PID; do
          wait $pid || FAILED=1
        done
        
        if [ $FAILED -eq 1 ]; then
          echo "❌ One or more quality checks failed"
          exit 1
        fi
        echo "✅ All quality checks passed"

    # ============ TESTING ============
    - name: Run tests with coverage
      run: |
        uv run pytest --cov=zenyth --cov-report=xml --cov-report=term-missing \
          --junitxml=junit.xml -o junit_family=legacy -n auto

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: nehpz/zenyth

    - name: Upload test results to Codecov
      if: ${{ !cancelled() }}
      uses: codecov/test-results-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

    # ============ SONARCLOUD ANALYSIS ============
    - name: SonarCloud Analysis
      if: always()
      uses: SonarSource/sonarqube-scan-action@v5.2.0
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: https://sonarcloud.io

    # ============ EXTENDED SECURITY ANALYSIS ============
    - name: Extended security checks
      run: |
        # Additional security scanning
        uv run bandit -r src/ -f json -o bandit-security-report.json
        # Safety check for known vulnerabilities
        uv pip list --format=json | jq -r '.[] | "\(.name)==\(.version)"' > requirements-freeze.txt
        uv run safety check -r requirements-freeze.txt --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-security-report.json
          safety-report.json
        retention-days: 30

    # ============ STATUS SUMMARY ============
    - name: Quality Gate Status Summary
      if: always()
      run: |
        echo "## 🎯 Quality Gate Results" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| SOLID Compliance | ✅ Validated |" >> $GITHUB_STEP_SUMMARY
        echo "| Format (Black) | ✅ Compliant |" >> $GITHUB_STEP_SUMMARY
        echo "| Linting (Ruff) | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        echo "| Type Safety (MyPy) | ✅ Validated |" >> $GITHUB_STEP_SUMMARY
        echo "| Security (Bandit) | ✅ Approved |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Coverage | ✅ Generated |" >> $GITHUB_STEP_SUMMARY
        echo "| SonarCloud Analysis | ✅ With Coverage |" >> $GITHUB_STEP_SUMMARY
