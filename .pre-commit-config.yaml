# See https://pre-commit.com for more information
default_language_version:
  python: python3.11

repos:
# General file fixes
- repo: https://github.com/pre-commit/pre-commit-hooks
  rev: v4.5.0
  hooks:
  - id: trailing-whitespace
    args: [ --markdown-linebreak-ext=md ]
  - id: end-of-file-fixer
  - id: check-yaml
    args: [ --unsafe ] # Allow custom tags for SPARC configs
  - id: check-added-large-files
    args: [ --maxkb=500 ]
  - id: check-case-conflict
  - id: check-merge-conflict
  - id: check-symlinks
  - id: check-toml
  - id: debug-statements
    exclude: ^src/orchestration/debug\.py$
  - id: mixed-line-ending
    args: [ --fix=lf ]
  - id: detect-private-key

# Python security checks
- repo: https://github.com/Yelp/detect-secrets
  rev: v1.4.0
  hooks:
  - id: detect-secrets
    args: [ --baseline, .secrets.baseline ]
    exclude: \.lock$|\.yaml$|\.json$

# Ruff - Fast Python linter and formatter
- repo: https://github.com/astral-sh/ruff-pre-commit
  rev: v0.7.0
  hooks:
  # Run the linter
  - id: ruff
    args: [ --fix, --exit-non-zero-on-fix ]
    types_or: [ python, pyi, jupyter ]
  # Run the formatter
  - id: ruff-format
    types_or: [ python, pyi, jupyter ]

# Type checking with mypy
- repo: https://github.com/pre-commit/mirrors-mypy
  rev: v1.8.0
  hooks:
  - id: mypy
    additional_dependencies:
    - pydantic>=2.0.0
    - types-PyYAML
    - types-requests
    - pytest
    args: [ --config-file=pyproject.toml ]
    exclude: ^tests/fixtures/

# Security scanning with bandit
- repo: https://github.com/PyCQA/bandit
  rev: 1.7.5
  hooks:
  - id: bandit
    args: [ -c, pyproject.toml ]
    exclude: ^tests/

# Check for common security issues
- repo: https://github.com/Lucas-C/pre-commit-hooks-safety
  rev: v1.3.3
  hooks:
  - id: python-safety-dependencies-check
    files: pyproject\.toml$

# Validate pyproject.toml
- repo: https://github.com/abravalheri/validate-pyproject
  rev: v0.15
  hooks:
  - id: validate-pyproject
    additional_dependencies: [ "validate-pyproject[all]" ]

# Check for outdated Python syntax
- repo: https://github.com/asottile/pyupgrade
  rev: v3.15.0
  hooks:
  - id: pyupgrade
    args: [ --py311-plus, --keep-runtime-typing ]

# Commitizen - Conventional commits
- repo: https://github.com/commitizen-tools/commitizen
  rev: 3.13.0
  hooks:
  - id: commitizen
    stages: [ commit-msg ]

# YAML formatting
- repo: https://github.com/pre-commit/mirrors-prettier
  rev: v3.1.0
  hooks:
  - id: prettier
    types_or: [ yaml, json ]
    exclude: ^sparc_config/.*\.yaml$ # Don't format SPARC configs

# Markdown formatting and linting
- repo: https://github.com/igorshubovych/markdownlint-cli
  rev: v0.37.0
  hooks:
  - id: markdownlint
    args: [ --fix ]
    exclude: ^sparc_config/prompts/.*\.md$ # Don't touch prompt templates

# Shell script linting (for any deployment scripts)
- repo: https://github.com/shellcheck-py/shellcheck-py
  rev: v0.9.0.6
  hooks:
  - id: shellcheck
    exclude: ^\.git/

# Dockerfile linting (if you add containers later)
- repo: https://github.com/hadolint/hadolint
  rev: v2.12.0
  hooks:
  - id: hadolint-docker
    args: [ --ignore, DL3008, --ignore, DL3009 ]

# Local hooks for project-specific checks
- repo: local
  hooks:
  - id: check-sparc-configs
    name: Validate SPARC configuration files
    entry: python scripts/validate_sparc_configs.py
    language: python
    files: ^sparc_config/.*\.(py|yaml)$
    pass_filenames: true
    additional_dependencies: [ pydantic, PyYAML ]

  - id: check-no-claude-keys
    name: Check for Claude API keys
    entry: '(?i)(claude|anthropic)[-_]?(api)?[-_]?key'
    language: pygrep
    types: [ text ]
    exclude: \.md$

  - id: pytest-check
    name: Run critical unit tests
    entry: pytest -xvs tests/unit/test_core_interfaces.py
    language: python
    pass_filenames: false
    stages: [ push ]
    additional_dependencies: [ pytest, pytest-asyncio ]

  - id: check-idempotency
    name: Check for idempotency violations
    entry: python scripts/check_idempotency.py
    language: python
    types: [ python ]
    exclude: ^tests/
    stages: [ commit ]

  - id: check-atomicity
    name: Check for atomicity violations
    entry: python scripts/check_atomicity.py
    language: python
    types: [ python ]
    exclude: ^tests/
    stages: [ commit ]

# Configuration for specific hooks
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ""
  autoupdate_commit_msg: "[pre-commit.ci] pre-commit autoupdate"
  autoupdate_schedule: weekly
  skip: [ mypy, pytest-check ] # These require full environment
  submodules: false
