[build-system]
requires = ["hatchling>=1.21.0"]
build-backend = "hatchling.build"

[project]
name = "zenyth"
version = "0.1.0"
description = "SPARC orchestration system combining mcp-agent, Claude Code, and Serena"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "rzp labs", email = "engineering@rzp-labs.com"},
]
keywords = ["orchestration", "sparc", "mcp", "ai-agents", "claude code"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]

dependencies = [
    "claude-code-sdk>=0.1.0",
    "mcp-agent>=0.1.0",
    "pydantic>=2.0.0",
    "rich>=13.0.0",
    "structlog>=24.0.0",
    "tenacity>=8.0.0",
    "httpx>=0.25.0", # For HTTP-based MCP connections
]

[project.urls]
Homepage = "https://github.com/rzp-labs/zenyth"
Documentation = "https://zenyth.rzp-labs.com"
Repository = "https://github.com/rzp-labs/zenyth.git"
Issues = "https://github.com/rzp-labs/zenyth/issues"

[tool.uv]
dev-dependencies = [
    "python-dotenv>=1.0.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-timeout>=2.2.0",
    "types-requests",
    "black>=23.0.0",
    "mypy>=1.8.0",
    "ruff>=0.7.0",
    "bandit>=1.7.0",
    "pre-commit>=3.5.0",
    "ipdb>=0.13.0",
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.24.0",
    "opentelemetry-api>=1.22.0",
    "opentelemetry-sdk>=1.22.0",
    "context-portal-mcp>=0.2.5", # Project memory and context management
]

[tool.ruff]
preview = true
src = ["src", "test"]
target-version = "py311"
required-version = ">=0.7.0"
output-format = "grouped"
fix = true
unsafe-fixes = false
line-length = 100
extend-exclude = [
    "__pycache__",
    ".pytest_cache",
    "htmlcov",
    ".coverage",
    ".mypy_cache",
    ".ruff_cache",
    "build",
    "dist",
]

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = "dynamic"
indent-style = "space"
line-ending = "auto"
quote-style = "double"
skip-magic-trailing-comma = false
preview = true

[tool.ruff.lint]
preview = true
select = [
    "B",       # flake8-bugbear
    "D",       # pydocstyle
    "E",       # pycodestyle errors
    "F",       # pyflakes
    "G",       # flake8-logging-format
    "I",       # isort
    "N",       # pep8-naming
    "Q",       # flake8-quotes
    "S",       # bandit (security)
    "W",       # pycodestyle warnings
    "C4",      # flake8-comprehensions
    "PL",      # pylint
    "PT",      # pytest
    "TC",      # flake8-type-checking
    "UP",      # pyupgrade
    "ARG",     # flake8-unused-arguments
    "C90",     # mccabe
    "COM",     # flake8-commas
    "DTZ",     # flake8-datetimez
    "FLY",     # flynt
    "ISC",     # flake8-implicit-str-concat
    "PIE",     # flake8-pie
    "PLC",     # pylint - convention
    "PLE",     # pylint - error
    "PLW",     # pylint - warning
    "PTH",     # flake8-use-pathlib
    "RET",     # flake8-return
    "RSE",     # flake8-raise
    "RUF",     # ruff-specific rules
    "SIM",     # flake8-simplify
    "TID",     # flake8-tidy-imports
    "YTT",     # flake8-2020
    "RUF027",  # Detects mutable default arguments (idempotency risk)
    "B008",    # Do not perform function calls in argument defaults
    "B904",    # Within an except clause, raise exceptions with raise ... from err
    "PLW2901", # Redefined loop variable (can indicate state mutation issues)
    "FURB",    # Additional modernization rules that can help with cleaner code
    "SLF",     # Private member access (encapsulation helps with atomicity)
    "ASYNC",   # flake8-async
    "LOG",     # flake8-logging - critical for distributed debugging
    "T20",     # flake8-print - catches debug prints in production
    "ERA",     # flake8-eradicate - finds commented code
    "TRY",     # tryceratops - exception handling patterns
]

fixable = ["ALL"]
extend-fixable = ["F401", "B905"]
unfixable = ["F401", "F841", "F601", "F602", "B018"]
ignore = ["COM812", "D100", "D104", "D203", "D213", "ERA001"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F403", "D104"]
"scripts/*.py" = ["PLR2004", "T20"]
"tests/**/*" = [
    "D",
    "S101",
    "S602",
    "ARG",
    "PLR2004",
    "TRY003",
]
"*/test_*.py" = [
    "D",
    "S101",
    "S602",
    "ARG",
    "PLR2004",
    "TRY003",
]
"src/orchestration/*.py" = [
    "PLR0913",  # Too many arguments - orchestrators legitimately need them
]
"src/phases/*.py" = [
    "PLR0904",  # Too many public methods - phases are necessarily complex
]

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true
suppress-dummy-args = true

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["id", "type", "input", "help", "filter"]

[tool.ruff.lint.isort]
combine-as-imports = false
force-wrap-aliases = false
known-first-party = ["zenyth"]
known-third-party = [
    "mcp_agent",
    "claude_code",
    "pydantic",
    "rich",
    "httpx",
    "pytest",
]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]

[tool.ruff.lint.pydocstyle]
convention = "google"
property-decorators = ["property", "cached_property", "functools.cached_property"]

[tool.ruff.lint.flake8-quotes]
avoid-escape = true
docstring-quotes = "double"
inline-quotes = "double"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "parents"

[tool.ruff.lint.flake8-type-checking]
strict = true
runtime-evaluated-base-classes = ["pydantic.BaseModel"]
runtime-evaluated-decorators = ["pydantic.dataclasses.dataclass"]

[tool.ruff.lint.mccabe]
max-complexity = 8

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["classmethod", "pydantic.validator", "pydantic.field_validator"]
extend-ignore-names = ["visit_*", "generic_visit"]

[tool.ruff.lint.pylint]
max-args = 5
max-branches = 12
max-returns = 6
max-statements = 50

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = true
mark-parentheses = true
parametrize-names-type = "tuple"
parametrize-values-type = "list"
parametrize-values-row-type = "tuple"

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true  # Preserve runtime type checking for mcp-agent

[tool.black]
line-length = 100
target-version = ["py311"]
preview = true

[tool.mypy]
python_version = "3.11"
allow_redefinition = true
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
disallow_untyped_decorators = true
ignore_missing_imports = true
no_implicit_optional = true
pretty = true
show_error_codes = true
show_error_context = true
show_traceback = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true
warn_required_dynamic_aliases = true
warn_return_any = true
disallow_any_generics = true
disallow_subclassing_any = true
strict = true
plugins = ["pydantic.mypy"]
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
exclude = [
    "^build/",
    "^docs/",
    "^tests/fixtures/",
    "^.venv/",
]

# MCP and Claude Code specific overrides
[[tool.mypy.overrides]]
module = "claude_code.*"
ignore_missing_imports = false

[[tool.mypy.overrides]]
module = "mcp_agent.*"
ignore_missing_imports = false

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_untyped_decorators = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
pythonpath = ["src"]
addopts = [
    "--strict-markers",
    "--cov=zenyth",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "-vv",
    "--tb=short",
    "--strict-config",
    "--no-cov-on-fail",
]
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "infrastructure: marks tests that require infrastructure components",
    "idempotent: marks tests that verify idempotency",
    "atomic: marks tests that verify atomicity",
    "concurrent: marks tests that run with concurrency",
    "phase: marks tests for specific SPARC phases",
    "mock_mcp: marks tests using mock MCP servers",
    "slow: marks tests that take >5s (orchestration integration)",
    "flaky: marks tests with external dependencies",
]
# Async configuration
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
# Timeout configuration
timeout = 30
timeout_method = "thread"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning:mcp_agent.*",
]

[tool.pylint]
ignore-paths = ["^.venv/.*$", "^venv/.*$", "^.*/site-packages/.*$"]
ignore = [".venv", "venv", "build", "dist", "*.egg-info"]
max-line-length = 120
disable = ["too-few-public-methods", "too-many-instance-attributes"]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", "build", "dist"]
skips = ["B101"]  # Allow assert in test files
tests = ["B201", "B301", "B302", "B303", "B304", "B305", "B306"]

[tool.bandit.assert_used]
skips = ["*/test_*.py", "*/conftest.py", "tests/*"]

[tool.coverage.run]
source = ["src"]
branch = true
contexts = ["phase-*", "integration-*"]
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/conftest.py",
    "*/test_*.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
fail_under = 80
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self\\.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if False:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "@overload",
    "\\.\\.\\.",
]
exclude_also = [
    "if TYPE_CHECKING:",
    "\\.\\.\\.",
    "@overload",
    "class .*\\(Protocol\\):",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.pre-commit]
# This section works with .pre-commit-config.yaml
python = "python3.11"

# Pre-commit hook configuration (requires .pre-commit-config.yaml)
[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
    "src/zenyth/__init__.py:__version__",
]

[tool.hatch.version]
path = "src/zenyth/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
]

[tool.hatch.build.targets.wheel]
packages = ["src/zenyth"]
